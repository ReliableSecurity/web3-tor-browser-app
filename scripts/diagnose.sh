#!/bin/bash

echo "üîç Web3 Tor Browser App - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
echo "================================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
echo ""
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..."

# –û–°
OS=$(lsb_release -d 2>/dev/null | cut -f2 || echo "Unknown")
print_info "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: $OS"

# –ü–∞–º—è—Ç—å
TOTAL_RAM=$(free -h | awk '/^Mem:/ {print $2}')
AVAILABLE_RAM=$(free -h | awk '/^Mem:/ {print $7}')
print_info "–ü–∞–º—è—Ç—å: $TOTAL_RAM (–¥–æ—Å—Ç—É–ø–Ω–æ: $AVAILABLE_RAM)"

# –î–∏—Å–∫
DISK_USAGE=$(df -h / | awk 'NR==2 {print $3"/"$2" ("$5")"}')
print_info "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: $DISK_USAGE"

# CPU
CPU_INFO=$(lscpu | grep "Model name" | cut -d':' -f2 | xargs)
CPU_CORES=$(nproc)
print_info "CPU: $CPU_INFO ($CPU_CORES —è–¥–µ—Ä)"

echo ""
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."

# Docker
if command -v docker &> /dev/null; then
    DOCKER_VERSION=$(docker --version | cut -d' ' -f3 | cut -d',' -f1)
    print_status 0 "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–≤–µ—Ä—Å–∏—è: $DOCKER_VERSION)"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker daemon
    if docker info &> /dev/null; then
        print_status 0 "Docker daemon –∑–∞–ø—É—â–µ–Ω"
    else
        print_status 1 "Docker daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    fi
else
    print_status 1 "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# Docker Compose
if command -v docker-compose &> /dev/null; then
    COMPOSE_VERSION=$(docker-compose --version | cut -d' ' -f3 | cut -d',' -f1)
    print_status 0 "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–≤–µ—Ä—Å–∏—è: $COMPOSE_VERSION)"
else
    print_status 1 "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# Node.js
if command -v node &> /dev/null; then
    NODE_VERSION=$(node --version)
    print_status 0 "Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–≤–µ—Ä—Å–∏—è: $NODE_VERSION)"
else
    print_status 1 "Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# NPM
if command -v npm &> /dev/null; then
    NPM_VERSION=$(npm --version)
    print_status 0 "NPM —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–≤–µ—Ä—Å–∏—è: $NPM_VERSION)"
else
    print_status 1 "NPM –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# Git
if command -v git &> /dev/null; then
    GIT_VERSION=$(git --version | cut -d' ' -f3)
    print_status 0 "Git —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–≤–µ—Ä—Å–∏—è: $GIT_VERSION)"
else
    print_status 1 "Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

echo ""
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."

# .env —Ñ–∞–π–ª
if [ -f ".env" ]; then
    print_status 0 ".env —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if grep -q "TELEGRAM_BOT_TOKEN=" .env; then
        print_status 0 "TELEGRAM_BOT_TOKEN –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else
        print_status 1 "TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
    
    if grep -q "BASE_URL=" .env; then
        print_status 0 "BASE_URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else
        print_warning "BASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)"
    fi
else
    print_status 1 ".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

# package.json
if [ -f "package.json" ]; then
    print_status 0 "package.json —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
else
    print_status 1 "package.json –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

# node_modules
if [ -d "node_modules" ]; then
    print_status 0 "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
else
    print_status 1 "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
fi

echo ""
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤..."

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞
check_port() {
    local port=$1
    local name=$2
    
    if ss -tuln | grep -q ":$port "; then
        print_warning "–ü–æ—Ä—Ç $port ($name) –∑–∞–Ω—è—Ç"
        return 1
    else
        print_status 0 "–ü–æ—Ä—Ç $port ($name) —Å–≤–æ–±–æ–¥–µ–Ω"
        return 0
    fi
}

check_port 3000 "–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
check_port 6379 "Redis"
check_port 5900 "VNC base"
check_port 6080 "Web VNC"

echo ""
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è..."

# –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
if ping -c 1 8.8.8.8 &> /dev/null; then
    print_status 0 "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    print_status 1 "–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
fi

# Tor —Å–µ—Ç—å (–ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API)
if curl -s --max-time 5 "https://check.torproject.org/api/ip" &> /dev/null; then
    print_status 0 "Tor API –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    print_warning "Tor API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é)"
fi

# Telegram API
if [ -f ".env" ]; then
    source .env
    if [ -n "$TELEGRAM_BOT_TOKEN" ]; then
        if curl -s --max-time 5 "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/getMe" | grep -q '"ok":true'; then
            print_status 0 "Telegram Bot API —Ä–∞–±–æ—Ç–∞–µ—Ç"
        else
            print_status 1 "Telegram Bot API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω"
        fi
    fi
fi

echo ""
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤
if docker images | grep -q "tor-browser-app"; then
    print_status 0 "Docker –æ–±—Ä–∞–∑ tor-browser-app –Ω–∞–π–¥–µ–Ω"
else
    print_status 1 "Docker –æ–±—Ä–∞–∑ tor-browser-app –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

if docker images | grep -q "redis"; then
    print_status 0 "Docker –æ–±—Ä–∞–∑ redis –Ω–∞–π–¥–µ–Ω"
else
    print_warning "Docker –æ–±—Ä–∞–∑ redis –Ω–µ –Ω–∞–π–¥–µ–Ω (–±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)"
fi

if docker images | grep -q "nginx"; then
    print_status 0 "Docker –æ–±—Ä–∞–∑ nginx –Ω–∞–π–¥–µ–Ω"
else
    print_warning "Docker –æ–±—Ä–∞–∑ nginx –Ω–µ –Ω–∞–π–¥–µ–Ω (–±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)"
fi

echo ""
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
if docker ps | grep -q "web3-tor-app"; then
    print_status 0 "–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ"
else
    print_warning "–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ"
fi

if docker ps | grep -q "redis"; then
    print_status 0 "Redis —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω"
else
    print_warning "Redis —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
fi

if docker ps | grep -q "nginx"; then
    print_status 0 "Nginx —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω"
else
    print_warning "Nginx —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
fi

echo ""
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã..."

# –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
if [ -r "package.json" ]; then
    print_status 0 "–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"
else
    print_status 1 "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –ø—Ä–æ–µ–∫—Ç–∞"
fi

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
for dir in "logs" "data" "docker" "src" "frontend"; do
    if [ -d "$dir" ]; then
        print_status 0 "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $dir —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        print_status 1 "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $dir –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
done

echo ""
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤..."

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
MEM_USAGE=$(free | awk 'FNR==2{printf "%.0f%%", $3/($3+$4)*100}')
if [ "${MEM_USAGE%?}" -lt 80 ]; then
    print_status 0 "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: $MEM_USAGE"
else
    print_warning "–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: $MEM_USAGE"
fi

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
DISK_USAGE_PERCENT=$(df / | awk 'FNR==2{print $5}' | sed 's/%//')
if [ "$DISK_USAGE_PERCENT" -lt 80 ]; then
    print_status 0 "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: $DISK_USAGE_PERCENT%"
else
    print_warning "–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: $DISK_USAGE_PERCENT%"
fi

# CPU Load
CPU_LOAD=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//')
print_info "–ù–∞–≥—Ä—É–∑–∫–∞ CPU: $CPU_LOAD"

echo ""
print_info "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º:"
echo ""

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
if ! command -v docker &> /dev/null; then
    echo "üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker:"
    echo "   curl -fsSL https://get.docker.com -o get-docker.sh && sudo sh get-docker.sh"
    echo ""
fi

if ! command -v node &> /dev/null; then
    echo "üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js:"
    echo "   curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -"
    echo "   sudo apt-get install -y nodejs"
    echo ""
fi

if [ ! -f ".env" ]; then
    echo "üîß –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª:"
    echo "   cp .env.example .env && nano .env"
    echo ""
fi

if [ ! -d "node_modules" ]; then
    echo "üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:"
    echo "   npm install"
    echo ""
fi

if ! docker images | grep -q "tor-browser-app"; then
    echo "üîß –°–æ–±–µ—Ä–∏—Ç–µ Docker –æ–±—Ä–∞–∑:"
    echo "   docker build -t tor-browser-app -f docker/Dockerfile ."
    echo ""
fi

echo "================================================="
print_info "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞–ª–∏—Å—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–ª–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
