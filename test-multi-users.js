#!/usr/bin/env node

require('dotenv').config();
const SessionManager = require('./src/sessionManager');

async function testMultiUserSupport() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');
    
    const sessionManager = new SessionManager();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    sessionManager.setLimits({
        maxSessionsPerUser: 2,
        maxTotalSessions: 5
    });
    
    console.log('üìä –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(sessionManager.getStats());
    console.log('');
    
    try {
        // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('‚úÖ –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        
        sessionManager.createUserSession('user1', 'session_user1_1');
        sessionManager.createUserSession('user1', 'session_user1_2');
        sessionManager.createUserSession('user2', 'session_user2_1');
        
        console.log('   –°–æ–∑–¥–∞–Ω–æ 3 —Å–µ—Å—Å–∏–∏ –¥–ª—è 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        console.log(`   User1 —Å–µ—Å—Å–∏–π: ${sessionManager.getUserSessionCount('user1')}`);
        console.log(`   User2 —Å–µ—Å—Å–∏–π: ${sessionManager.getUserSessionCount('user2')}`);
        console.log('');
        
        // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('‚úÖ –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        
        try {
            sessionManager.createUserSession('user1', 'session_user1_3');
            console.log('   ‚ùå –û–®–ò–ë–ö–ê: –õ–∏–º–∏—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª!');
        } catch (error) {
            console.log(`   ‚úÖ –õ–∏–º–∏—Ç —Å—Ä–∞–±–æ—Ç–∞–ª: ${error.message}`);
        }
        console.log('');
        
        // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –ª–∏–º–∏—Ç–∞
        console.log('‚úÖ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –ª–∏–º–∏—Ç–∞');
        
        sessionManager.createUserSession('user3', 'session_user3_1');
        sessionManager.createUserSession('user3', 'session_user3_2');
        
        try {
            sessionManager.createUserSession('user4', 'session_user4_1');
            console.log('   ‚ùå –û–®–ò–ë–ö–ê: –û–±—â–∏–π –ª–∏–º–∏—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª!');
        } catch (error) {
            console.log(`   ‚úÖ –û–±—â–∏–π –ª–∏–º–∏—Ç —Å—Ä–∞–±–æ—Ç–∞–ª: ${error.message}`);
        }
        console.log('');
        
        // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–π
        console.log('‚úÖ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–π');
        
        const isUser1Session = sessionManager.isUserSession('user1', 'session_user1_1');
        const isNotUser1Session = sessionManager.isUserSession('user1', 'session_user2_1');
        
        console.log(`   user1 –≤–ª–∞–¥–µ–µ—Ç session_user1_1: ${isUser1Session}`);
        console.log(`   user1 –ù–ï –≤–ª–∞–¥–µ–µ—Ç session_user2_1: ${!isNotUser1Session}`);
        console.log('');
        
        // –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        console.log('‚úÖ –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
        
        const user1Info = sessionManager.getUserInfo('user1');
        console.log('   –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ user1:', user1Info);
        console.log('');
        
        // –¢–µ—Å—Ç 6: –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π
        console.log('‚úÖ –¢–µ—Å—Ç 6: –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π');
        
        sessionManager.removeUserSession('session_user1_1');
        console.log(`   –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è session_user1_1, —É user1 —Å–µ—Å—Å–∏–π: ${sessionManager.getUserSessionCount('user1')}`);
        
        sessionManager.forceCleanupUser('user2');
        console.log(`   –ü–æ—Å–ª–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ user2 —Å–µ—Å—Å–∏–π: ${sessionManager.getUserSessionCount('user2')}`);
        console.log('');
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        console.log('üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
        const finalStats = sessionManager.getStats();
        console.log(finalStats);
        console.log('');
        
        // –¢–µ—Å—Ç —Å–æ–±—ã—Ç–∏–π
        console.log('‚úÖ –¢–µ—Å—Ç 7: –°–æ–±—ã—Ç–∏—è SessionManager');
        
        let eventsCaught = 0;
        
        sessionManager.on('sessionCreated', ({ userId, sessionId }) => {
            console.log(`   üî• –°–æ–±—ã—Ç–∏–µ: –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è ${sessionId} –¥–ª—è ${userId}`);
            eventsCaught++;
        });
        
        sessionManager.on('sessionRemoved', ({ userId, sessionId }) => {
            console.log(`   üóëÔ∏è –°–æ–±—ã—Ç–∏–µ: –£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è ${sessionId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            eventsCaught++;
        });
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
        sessionManager.createUserSession('test_user', 'test_session');
        sessionManager.removeUserSession('test_session');
        
        console.log(`   –ü–æ–π–º–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: ${eventsCaught}`);
        console.log('');
        
        console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        console.log('');
        console.log('üìã –û—Ç—á–µ—Ç –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö:');
        console.log('   ‚úÖ –õ–∏–º–∏—Ç—ã –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞—é—Ç');
        console.log('   ‚úÖ –û–±—â–∏–µ –ª–∏–º–∏—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç');
        console.log('   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–π');
        console.log('   ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö');
        console.log('   ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π');
        console.log('   ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞');
        console.log('   ‚úÖ –°–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
        console.log('   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error);
    } finally {
        sessionManager.shutdown();
    }
}

testMultiUserSupport().catch(console.error);
