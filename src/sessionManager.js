const EventEmitter = require('events');

class SessionManager extends EventEmitter {
    constructor() {
        super();
        this.userSessions = new Map(); // userId -> Set of sessionIds
        this.sessionUsers = new Map(); // sessionId -> userId
        this.sessionLimits = {
            maxSessionsPerUser: 3,
            maxTotalSessions: 50,
            sessionTimeout: 30 * 60 * 1000 // 30 –º–∏–Ω—É—Ç
        };
        
        // –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        this.cleanupInterval = setInterval(() => {
            this.cleanupExpiredSessions();
        }, 5 * 60 * 1000);
        
        console.log('üìä Session Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    createUserSession(userId, sessionId) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        if (this.getTotalSessions() >= this.sessionLimits.maxTotalSessions) {
            throw new Error('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ—Å—Å–∏–π');
        }

        if (this.getUserSessionCount(userId) >= this.sessionLimits.maxSessionsPerUser) {
            throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ —Å–µ—Å—Å–∏–π (${this.sessionLimits.maxSessionsPerUser})`);
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π
        if (!this.userSessions.has(userId)) {
            this.userSessions.set(userId, new Set());
        }
        
        this.userSessions.get(userId).add(sessionId);
        this.sessionUsers.set(sessionId, userId);

        console.log(`üë§ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è ${sessionId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        this.emit('sessionCreated', { userId, sessionId });
        
        return true;
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    removeUserSession(sessionId) {
        const userId = this.sessionUsers.get(sessionId);
        if (!userId) {
            return false;
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π
        this.sessionUsers.delete(sessionId);
        if (this.userSessions.has(userId)) {
            this.userSessions.get(userId).delete(sessionId);
            
            // –£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Å–µ—Å—Å–∏–π
            if (this.userSessions.get(userId).size === 0) {
                this.userSessions.delete(userId);
            }
        }

        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è ${sessionId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        this.emit('sessionRemoved', { userId, sessionId });
        
        return true;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getUserSessionCount(userId) {
        return this.userSessions.has(userId) ? this.userSessions.get(userId).size : 0;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getUserSessions(userId) {
        return this.userSessions.has(userId) ? 
            Array.from(this.userSessions.get(userId)) : [];
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ—Å—Å–∏–π
    getTotalSessions() {
        return this.sessionUsers.size;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–µ—Å—Å–∏–∏
    getSessionUser(sessionId) {
        return this.sessionUsers.get(sessionId);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    isUserSession(userId, sessionId) {
        return this.sessionUsers.get(sessionId) === userId;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    getStats() {
        const userCount = this.userSessions.size;
        const sessionCount = this.sessionUsers.size;
        const activeUsers = [];
        
        for (const [userId, sessions] of this.userSessions.entries()) {
            activeUsers.push({
                userId,
                sessionCount: sessions.size,
                sessions: Array.from(sessions)
            });
        }

        return {
            totalUsers: userCount,
            totalSessions: sessionCount,
            maxSessionsPerUser: this.sessionLimits.maxSessionsPerUser,
            maxTotalSessions: this.sessionLimits.maxTotalSessions,
            activeUsers
        };
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π (–∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å WebAppManager)
    async cleanupExpiredSessions() {
        console.log('üßπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π...');
        
        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è WebAppManager
        this.emit('cleanupRequested');
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async forceCleanupUser(userId) {
        const sessions = this.getUserSessions(userId);
        
        for (const sessionId of sessions) {
            this.emit('forceCleanup', { userId, sessionId });
            this.removeUserSession(sessionId);
        }
        
        console.log(`üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    setLimits(limits) {
        this.sessionLimits = { ...this.sessionLimits, ...limits };
        console.log('‚öôÔ∏è –õ–∏–º–∏—Ç—ã —Å–µ—Å—Å–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', this.sessionLimits);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    getUserInfo(userId) {
        if (!this.userSessions.has(userId)) {
            return null;
        }

        return {
            userId,
            sessionCount: this.getUserSessionCount(userId),
            sessions: this.getUserSessions(userId),
            maxSessions: this.sessionLimits.maxSessionsPerUser,
            canCreateMore: this.getUserSessionCount(userId) < this.sessionLimits.maxSessionsPerUser
        };
    }

    // Shutdown
    shutdown() {
        if (this.cleanupInterval) {
            clearInterval(this.cleanupInterval);
        }
        
        console.log('üõë Session Manager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
}

module.exports = SessionManager;
