const { spawn, exec } = require('child_process');
const fs = require('fs').promises;
const path = require('path');

class TorBrowserManager {
    constructor() {
        this.sessions = new Map();
        this.basePort = 5900; // –ë–∞–∑–æ–≤—ã–π –ø–æ—Ä—Ç –¥–ª—è VNC
        this.displayBase = 10; // –ë–∞–∑–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–∏—Å–ø–ª–µ—è
        console.log('üßÖ Tor –±—Ä–∞—É–∑–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // –ó–∞–ø—É—Å–∫ Tor –±—Ä–∞—É–∑–µ—Ä–∞ –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    async startBrowser(sessionId, options = {}) {
        try {
            console.log(`üöÄ –ó–∞–ø—É—Å–∫ Tor –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId}`);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ—Å—Å–∏—è –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (this.sessions.has(sessionId)) {
                throw new Error('–°–µ—Å—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            }

            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ –∏ –¥–∏—Å–ø–ª–µ—è
            const displayNumber = this.displayBase + this.sessions.size;
            const vncPort = this.basePort + this.sessions.size;
            const webPort = 6080 + this.sessions.size;

            // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏
            const sessionDir = path.join('/tmp', `tor-session-${sessionId}`);
            await fs.mkdir(sessionDir, { recursive: true });

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            const userAgent = options.userAgent || 'desktop';
            let geometry;
            
            switch (userAgent) {
                case 'mobile':
                    geometry = '390x844';
                    break;
                case 'tablet':
                    geometry = '768x1024';
                    break;
                default:
                    geometry = '1920x1080';
                    break;
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ Docker –∫–æ–º–∞–Ω–¥—ã
            const dockerImage = 'tor-browser-app';
            const containerName = `tor-browser-${sessionId}`;

            const dockerCommand = [
                'run',
                '--rm',
                '--name', containerName,
                '--shm-size=2g',
                '-e', `DISPLAY=:${displayNumber}`,
                '-e', `VNC_PORT=${vncPort}`,
                '-e', `WEB_PORT=${webPort}`,
                '-e', 'VNC_PASSWORD=toruser123',
                '-e', `GEOMETRY=${geometry}`,
                '-e', `USER_AGENT=${userAgent}`,
                '-p', `${vncPort}:${vncPort}`,
                '-p', `${webPort}:${webPort}`,
                '-v', `${sessionDir}:/home/toruser/Downloads`,
                '--cap-add=SYS_ADMIN',
                '--security-opt', 'seccomp=unconfined',
                // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                '--memory=2g',
                '--cpus=1.0',
                '--read-only',
                '--tmpfs=/tmp:rw,noexec,nosuid,size=100m',
                '-d',
                dockerImage
            ];

            // –ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            const dockerProcess = await this.executeCommand('docker', dockerCommand);

            // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            await this.waitForContainer(containerName);

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏
            const sessionData = {
                sessionId,
                containerName,
                displayNumber,
                vncPort,
                webPort,
                sessionDir,
                status: 'starting',
                createdAt: new Date(),
                dockerProcess
            };

            this.sessions.set(sessionId, sessionData);

            // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ Tor –±—Ä–∞—É–∑–µ—Ä–∞
            await this.waitForTorBrowser(sessionData);

            sessionData.status = 'running';

            console.log(`‚úÖ Tor –±—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId}`);

            return {
                sessionId,
                display: displayNumber,
                vncPort,
                webPort,
                status: 'running'
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Tor –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId}:`, error);
            
            // –û—á–∏—Å—Ç–∫–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            await this.cleanup(sessionId);
            
            throw error;
        }
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor –±—Ä–∞—É–∑–µ—Ä–∞
    async stopBrowser(sessionId) {
        try {
            console.log(`‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId}`);

            const sessionData = this.sessions.get(sessionId);
            if (!sessionData) {
                throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            await this.executeCommand('docker', ['stop', sessionData.containerName]);
            await this.executeCommand('docker', ['rm', '-f', sessionData.containerName]);

            // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            await this.cleanup(sessionId);

            // –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            this.sessions.delete(sessionId);

            console.log(`‚úÖ Tor –±—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId}`);

            return {
                success: true,
                message: '–ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Tor –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId}:`, error);
            throw error;
        }
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    async executeAction(sessionId, action, payload = {}) {
        try {
            const sessionData = this.sessions.get(sessionId);
            if (!sessionData) {
                throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            switch (action) {
                case 'navigate':
                    return await this.navigateToUrl(sessionData, payload.url);
                
                case 'screenshot':
                    return await this.takeScreenshot(sessionData);
                
                case 'get_title':
                    return await this.getPageTitle(sessionData);
                
                case 'click':
                    return await this.clickElement(sessionData, payload.x, payload.y);
                
                case 'type':
                    return await this.typeText(sessionData, payload.text);
                
                case 'scroll':
                    return await this.scrollPage(sessionData, payload.direction);
                
                default:
                    throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`);
            }

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è ${action} –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId}:`, error);
            throw error;
        }
    }

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ URL
    async navigateToUrl(sessionData, url) {
        const command = `xdotool search --onlyvisible --class "firefox" windowfocus && xdotool key ctrl+l && sleep 1 && xdotool type "${url}" && xdotool key Return`;
        
        await this.executeCommandInContainer(sessionData.containerName, command);
        
        return {
            success: true,
            message: `–ü–µ—Ä–µ—Ö–æ–¥ –∫ ${url}`
        };
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    async takeScreenshot(sessionData) {
        const screenshotPath = `/tmp/screenshot_${sessionData.sessionId}.png`;
        const command = `DISPLAY=:${sessionData.displayNumber} import -window root ${screenshotPath}`;
        
        await this.executeCommandInContainer(sessionData.containerName, command);
        
        return {
            success: true,
            screenshotPath
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    async getPageTitle(sessionData) {
        const command = `xdotool search --onlyvisible --class "firefox" getwindowname`;
        
        const result = await this.executeCommandInContainer(sessionData.containerName, command);
        
        return {
            success: true,
            title: result.stdout.trim()
        };
    }

    // –ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    async clickElement(sessionData, x, y) {
        const command = `xdotool mousemove ${x} ${y} && xdotool click 1`;
        
        await this.executeCommandInContainer(sessionData.containerName, command);
        
        return {
            success: true,
            message: `–ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º ${x}, ${y}`
        };
    }

    // –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
    async typeText(sessionData, text) {
        const command = `xdotool type "${text}"`;
        
        await this.executeCommandInContainer(sessionData.containerName, command);
        
        return {
            success: true,
            message: `–í–≤–µ–¥–µ–Ω —Ç–µ–∫—Å—Ç: ${text.substring(0, 50)}...`
        };
    }

    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    async scrollPage(sessionData, direction = 'down') {
        let command;
        
        switch (direction) {
            case 'down':
                command = 'xdotool key Page_Down';
                break;
            case 'up':
                command = 'xdotool key Page_Up';
                break;
            case 'top':
                command = 'xdotool key ctrl+Home';
                break;
            case 'bottom':
                command = 'xdotool key ctrl+End';
                break;
            default:
                throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏');
        }
        
        await this.executeCommandInContainer(sessionData.containerName, command);
        
        return {
            success: true,
            message: `–ü—Ä–æ–∫—Ä—É—Ç–∫–∞: ${direction}`
        };
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    async executeCommandInContainer(containerName, command) {
        return await this.executeCommand('docker', ['exec', containerName, 'bash', '-c', command]);
    }

    // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    async waitForContainer(containerName, maxAttempts = 30) {
        for (let i = 0; i < maxAttempts; i++) {
            try {
                const result = await this.executeCommand('docker', ['ps', '--filter', `name=${containerName}`, '--format', 'table {{.Names}}'b]);
                
                if (result.stdout.includes(containerName)) {
                    console.log(`‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerName} –∑–∞–ø—É—â–µ–Ω`);
                    return true;
                }
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
            }
            
            await new Promise(resolve => setTimeout(resolve, 2000));
        }
        
        throw new Error(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerName} –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ ${maxAttempts * 2} —Å–µ–∫—É–Ω–¥`);
    }

    // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Tor –±—Ä–∞—É–∑–µ—Ä–∞
    async waitForTorBrowser(sessionData, maxAttempts = 30) {
        console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Tor –±—Ä–∞—É–∑–µ—Ä–∞...');
        
        for (let i = 0; i < maxAttempts; i++) {
            try {
                const result = await this.executeCommandInContainer(
                    sessionData.containerName,
                    'pgrep firefox || pgrep tor-browser'
                );
                
                if (result.stdout.trim()) {
                    console.log('‚úÖ Tor –±—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω');
                    return true;
                }
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
            }
            
            await new Promise(resolve => setTimeout(resolve, 3000));
        }
        
        throw new Error('Tor –±—Ä–∞—É–∑–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏');
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
    executeCommand(command, args = []) {
        return new Promise((resolve, reject) => {
            const process = spawn(command, args);
            let stdout = '';
            let stderr = '';

            process.stdout.on('data', (data) => {
                stdout += data.toString();
            });

            process.stderr.on('data', (data) => {
                stderr += data.toString();
            });

            process.on('close', (code) => {
                if (code === 0) {
                    resolve({ stdout, stderr, exitCode: code });
                } else {
                    reject(new Error(`–ö–æ–º–∞–Ω–¥–∞ "${command} ${args.join(' ')}" –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∫–æ–¥–æ–º ${code}. stderr: ${stderr}`));
                }
            });

            process.on('error', (error) => {
                reject(error);
            });
        });
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–µ—Å—Å–∏–∏
    async cleanup(sessionId) {
        try {
            const sessionData = this.sessions.get(sessionId);
            if (sessionData) {
                // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                if (sessionData.sessionDir) {
                    await fs.rmdir(sessionData.sessionDir, { recursive: true });
                }

                // –ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                try {
                    await this.executeCommand('docker', ['rm', '-f', sessionData.containerName]);
                } catch (error) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                }
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏ ${sessionId}:`, error);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
    getActiveSessions() {
        const sessions = [];
        for (const [sessionId, data] of this.sessions.entries()) {
            sessions.push({
                sessionId,
                status: data.status,
                createdAt: data.createdAt,
                vncPort: data.vncPort,
                webPort: data.webPort
            });
        }
        return sessions;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏
    getSessionInfo(sessionId) {
        return this.sessions.get(sessionId);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Docker
    async checkDockerAvailability() {
        try {
            await this.executeCommand('docker', ['--version']);
            return true;
        } catch (error) {
            console.error('Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
            return false;
        }
    }

    // –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞
    async buildDockerImage() {
        try {
            console.log('üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞ –¥–ª—è Tor –±—Ä–∞—É–∑–µ—Ä–∞...');
            
            const dockerfilePath = path.join(__dirname, '../docker');
            await this.executeCommand('docker', [
                'build',
                '-t', 'tor-browser-app',
                dockerfilePath
            ]);
            
            console.log('‚úÖ Docker –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–∞:', error);
            return false;
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏
    async shutdown() {
        console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö Tor –±—Ä–∞—É–∑–µ—Ä —Å–µ—Å—Å–∏–π...');
        
        const shutdownPromises = [];
        for (const sessionId of this.sessions.keys()) {
            shutdownPromises.push(this.stopBrowser(sessionId));
        }
        
        await Promise.allSettled(shutdownPromises);
        console.log('‚úÖ –í—Å–µ —Å–µ—Å—Å–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }
}

module.exports = TorBrowserManager;
