const { spawn } = require('child_process');
const fs = require('fs').promises;
const path = require('path');

class VncServer {
    constructor() {
        this.sessions = new Map();
        console.log('üñ•Ô∏è VNC —Å–µ—Ä–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // –ó–∞–ø—É—Å–∫ VNC —Å–µ—Å—Å–∏–∏
    async startSession(sessionId, displayNumber) {
        try {
            console.log(`üöÄ –ó–∞–ø—É—Å–∫ VNC —Å–µ—Å—Å–∏–∏ –¥–ª—è ${sessionId} –Ω–∞ –¥–∏—Å–ø–ª–µ–µ :${displayNumber}`);

            if (this.sessions.has(sessionId)) {
                throw new Error('VNC —Å–µ—Å—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            }

            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Ä—Ç–∞ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            const webPort = 6080 + this.sessions.size;
            const vncPort = 5900 + displayNumber;

            // –í Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ VNC —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            const sessionData = {
                sessionId,
                displayNumber,
                vncPort,
                webPort,
                status: 'running',
                createdAt: new Date()
            };

            this.sessions.set(sessionId, sessionData);

            console.log(`‚úÖ VNC —Å–µ—Å—Å–∏—è ${sessionId} –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –ø–æ—Ä—Ç—É ${webPort}`);

            return {
                sessionId,
                port: webPort,
                vncPort,
                displayNumber,
                webUrl: `http://localhost:${webPort}/vnc.html?autoconnect=true`
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ VNC —Å–µ—Å—Å–∏–∏ ${sessionId}:`, error);
            throw error;
        }
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ VNC —Å–µ—Å—Å–∏–∏
    async stopSession(sessionId) {
        try {
            console.log(`‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ VNC —Å–µ—Å—Å–∏–∏ ${sessionId}`);

            const sessionData = this.sessions.get(sessionId);
            if (!sessionData) {
                throw new Error('VNC —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            // –í Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ VNC –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º
            this.sessions.delete(sessionId);

            console.log(`‚úÖ VNC —Å–µ—Å—Å–∏—è ${sessionId} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);

            return {
                success: true,
                message: 'VNC —Å–µ—Å—Å–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ VNC —Å–µ—Å—Å–∏–∏ ${sessionId}:`, error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏
    getSessionInfo(sessionId) {
        return this.sessions.get(sessionId);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
    getActiveSessions() {
        const sessions = [];
        for (const [sessionId, data] of this.sessions.entries()) {
            sessions.push({
                sessionId,
                status: data.status,
                createdAt: data.createdAt,
                vncPort: data.vncPort,
                webPort: data.webPort,
                displayNumber: data.displayNumber
            });
        }
        return sessions;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è noVNC
    generateNoVncConfig(sessionId, vncPort, password = 'toruser123') {
        const config = {
            host: 'localhost',
            port: vncPort,
            password: password,
            encrypt: false,
            true_color: true,
            cursor: true,
            shared: true,
            view_only: false,
            resize: 'remote'
        };

        return config;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ VNC –ø–æ—Ä—Ç–∞
    async checkPortAvailability(port) {
        return new Promise((resolve) => {
            const net = require('net');
            const server = net.createServer();
            
            server.listen(port, () => {
                server.once('close', () => {
                    resolve(true);
                });
                server.close();
            });
            
            server.on('error', () => {
                resolve(false);
            });
        });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
    async findAvailablePort(startPort = 6080) {
        for (let port = startPort; port < startPort + 100; port++) {
            const available = await this.checkPortAvailability(port);
            if (available) {
                return port;
            }
        }
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ—Ä—Ç');
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ VNC —Å–µ—Å—Å–∏–∏
    async takeScreenshot(sessionId) {
        try {
            const sessionData = this.sessions.get(sessionId);
            if (!sessionData) {
                throw new Error('VNC —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            const screenshotPath = `/tmp/vnc_screenshot_${sessionId}_${Date.now()}.png`;
            
            // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —á–µ—Ä–µ–∑ VNC
            const command = `vncsnapshot -quality 90 localhost:${sessionData.displayNumber} ${screenshotPath}`;
            
            return new Promise((resolve, reject) => {
                const process = spawn('bash', ['-c', command]);
                
                process.on('close', (code) => {
                    if (code === 0) {
                        resolve({
                            success: true,
                            screenshotPath,
                            sessionId
                        });
                    } else {
                        reject(new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: –∫–æ–¥ ${code}`));
                    }
                });
                
                process.on('error', reject);
            });

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ VNC —Å–µ—Å—Å–∏–∏ ${sessionId}:`, error);
            throw error;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ VNC –∫–æ–º–∞–Ω–¥—ã
    async sendVncCommand(sessionId, command) {
        try {
            const sessionData = this.sessions.get(sessionId);
            if (!sessionData) {
                throw new Error('VNC —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ VNC –ø—Ä–æ—Ç–æ–∫–æ–ª
            // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è VNC –∫–ª–∏–µ–Ω—Ç–∞
            
            return {
                success: true,
                message: `–ö–æ–º–∞–Ω–¥–∞ ${command} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏—é ${sessionId}`
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ VNC –∫–æ–º–∞–Ω–¥—ã ${sessionId}:`, error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ VNC —Å–µ—Å—Å–∏–∏
    async getSessionStats(sessionId) {
        try {
            const sessionData = this.sessions.get(sessionId);
            if (!sessionData) {
                throw new Error('VNC —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            const uptime = Date.now() - sessionData.createdAt.getTime();
            
            return {
                sessionId,
                uptime: Math.floor(uptime / 1000), // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                status: sessionData.status,
                displayNumber: sessionData.displayNumber,
                vncPort: sessionData.vncPort,
                webPort: sessionData.webPort,
                createdAt: sessionData.createdAt
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ VNC —Å–µ—Å—Å–∏–∏ ${sessionId}:`, error);
            throw error;
        }
    }

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è VNC —Å–µ—Å—Å–∏–∏
    async changeSessionPassword(sessionId, newPassword) {
        try {
            const sessionData = this.sessions.get(sessionId);
            if (!sessionData) {
                throw new Error('VNC —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å VNC —Å–µ—Ä–≤–µ—Ä–∞
            sessionData.password = newPassword;
            
            return {
                success: true,
                message: '–ü–∞—Ä–æ–ª—å VNC —Å–µ—Å—Å–∏–∏ –∏–∑–º–µ–Ω–µ–Ω'
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è VNC —Å–µ—Å—Å–∏–∏ ${sessionId}:`, error);
            throw error;
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ
    async setVideoQuality(sessionId, quality = 'medium') {
        try {
            const sessionData = this.sessions.get(sessionId);
            if (!sessionData) {
                throw new Error('VNC —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            const qualitySettings = {
                low: { quality: 30, compress: 9 },
                medium: { quality: 60, compress: 6 },
                high: { quality: 90, compress: 3 }
            };

            const settings = qualitySettings[quality] || qualitySettings.medium;
            sessionData.videoQuality = settings;
            
            return {
                success: true,
                quality: settings,
                message: `–ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${quality}`
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ VNC —Å–µ—Å—Å–∏–∏ ${sessionId}:`, error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ VNC —Å–µ—Å—Å–∏–∏
    async getSessionLogs(sessionId, lines = 100) {
        try {
            const sessionData = this.sessions.get(sessionId);
            if (!sessionData) {
                throw new Error('VNC —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ —á–∏—Ç–∞—Ç—å –ª–æ–≥–∏ VNC —Å–µ—Ä–≤–µ—Ä–∞
            const logs = [
                `[${new Date().toISOString()}] VNC —Å–µ—Å—Å–∏—è ${sessionId} –∑–∞–ø—É—â–µ–Ω–∞`,
                `[${new Date().toISOString()}] –î–∏—Å–ø–ª–µ–π :${sessionData.displayNumber}`,
                `[${new Date().toISOString()}] VNC –ø–æ—Ä—Ç: ${sessionData.vncPort}`,
                `[${new Date().toISOString()}] –í–µ–± –ø–æ—Ä—Ç: ${sessionData.webPort}`,
                `[${new Date().toISOString()}] –°—Ç–∞—Ç—É—Å: ${sessionData.status}`
            ];
            
            return {
                success: true,
                logs: logs.slice(-lines),
                sessionId
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ VNC —Å–µ—Å—Å–∏–∏ ${sessionId}:`, error);
            throw error;
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
    async cleanup() {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö VNC —Å–µ—Å—Å–∏–π...');
        
        const cleanupPromises = [];
        for (const sessionId of this.sessions.keys()) {
            cleanupPromises.push(this.stopSession(sessionId));
        }
        
        await Promise.allSettled(cleanupPromises);
        console.log('‚úÖ –í—Å–µ VNC —Å–µ—Å—Å–∏–∏ –æ—á–∏—â–µ–Ω—ã');
    }

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–π
    startMonitoring() {
        console.log('üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ VNC —Å–µ—Å—Å–∏–π...');
        
        setInterval(() => {
            const activeSessions = this.getActiveSessions();
            console.log(`üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö VNC —Å–µ—Å—Å–∏–π: ${activeSessions.length}`);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ "–∑–∞–≤–∏—Å—à–∏—Ö" —Å–µ—Å—Å–∏–π
            const now = Date.now();
            const maxAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
            
            for (const session of activeSessions) {
                const age = now - session.createdAt.getTime();
                if (age > maxAge) {
                    console.log(`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Å–µ—Å—Å–∏—è ${session.sessionId}, –≤–æ–∑—Ä–∞—Å—Ç: ${Math.floor(age / 1000 / 60)} –º–∏–Ω`);
                }
            }
        }, 5 * 60 * 1000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    stopMonitoring() {
        if (this.monitoringInterval) {
            clearInterval(this.monitoringInterval);
            console.log('üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ VNC —Å–µ—Å—Å–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
    }
}

module.exports = VncServer;
