const puppeteer = require('puppeteer');
const path = require('path');
const fs = require('fs').promises;
const TorManager = require('./torManager');
const EventEmitter = require('events');

class WebAppManager extends EventEmitter {
    constructor() {
        super();
        this.sessions = new Map();
        this.torManager = new TorManager();
        this.isInitialized = false;
        this.browserLaunchQueue = [];
        this.maxConcurrentSessions = parseInt(process.env.MAX_SESSIONS) || 10;
        
        console.log('üåê Web App Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        this.initialize();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TorManager –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    async initialize() {
        try {
            console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebApp Manager...');

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Tor Manager
            await this.torManager.initialize();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Tor
            this.setupTorEventHandlers();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Å—Å–∏–π
            this.setupSessionMonitoring();
            
            this.isInitialized = true;
            console.log('‚úÖ WebApp Manager –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
            this.emit('ready');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebApp Manager:', error);
            this.emit('error', error);
            throw error;
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π Tor
    setupTorEventHandlers() {
        this.torManager.on('ready', () => {
            console.log('‚úÖ Tor –≥–æ—Ç–æ–≤, –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä—ã');
        });
        
        this.torManager.on('connected', (data) => {
            console.log(`üåê Tor –ø–æ–¥–∫–ª—é—á–µ–Ω, IP: ${data.IP}`);
        });
        
        this.torManager.on('healthIssue', (error) => {
            console.error('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å Tor:', error.message);
            this.emit('torHealthIssue', error);
        });
        
        this.torManager.on('newIdentity', (data) => {
            console.log(`üîÑ –ù–æ–≤–∞—è Tor —Ü–µ–ø–æ—á–∫–∞, IP: ${data.IP}`);
            this.emit('newTorIdentity', data);
        });
        
        this.torManager.on('failed', () => {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Tor —Å–µ—Ä–≤–∏—Å–∞');
            this.emit('torFailed');
        });
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Å—Å–∏–π
    setupSessionMonitoring() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
        setInterval(async () => {
            await this.monitorSessions();
        }, 60000);
        
        console.log('üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Å—Å–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
    async monitorSessions() {
        const stats = {
            total: this.sessions.size,
            healthy: 0,
            unhealthy: 0,
            inactive: 0
        };
        
        const now = new Date();
        const inactivityThreshold = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
        
        for (const [sessionId, session] of this.sessions.entries()) {
            try {
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
                if (now - session.lastActivity > inactivityThreshold) {
                    stats.inactive++;
                    console.log(`‚ö†Ô∏è –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: ${sessionId}`);
                    await this.stopSession(sessionId);
                    continue;
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±—Ä–∞—É–∑–µ—Ä–∞
                if (session.browser && !session.browser.isConnected()) {
                    stats.unhealthy++;
                    console.log(`‚ùå –ù–µ–∑–¥–æ—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: ${sessionId}`);
                    await this.stopSession(sessionId);
                    continue;
                }
                
                stats.healthy++;
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Å—Å–∏–∏ ${sessionId}:`, error);
                stats.unhealthy++;
            }
        }
        
        this.emit('sessionStats', stats);
    }

    // –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è Telegram Web App
    async startBrowserSession(sessionId, options = {}) {
        try {
            console.log(`üöÄ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è ${sessionId}`);

            if (this.sessions.has(sessionId)) {
                throw new Error('–°–µ—Å—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            const deviceType = options.userAgent || 'desktop';
            const viewport = this.getViewportSettings(deviceType);

            // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Tor –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if (!this.isInitialized) {
                await new Promise((resolve) => {
                    this.once('ready', resolve);
                });
            }

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏ –æ—Ç TorManager
            const proxyConfig = this.torManager.getProxyConfig();

            // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ —Å Tor –ø—Ä–æ–∫—Å–∏
            const browserConfig = {
                headless: 'new',
                args: [
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-accelerated-2d-canvas',
                    '--disable-gpu',
                    '--window-size=1920,1080',
                    `--proxy-server=${proxyConfig.url}`,
                    '--disable-web-security',
                    '--disable-features=VizDisplayCompositor',
                    '--disable-background-networking',
                    '--disable-background-timer-throttling',
                    '--disable-renderer-backgrounding',
                    '--disable-backgrounding-occluded-windows',
                    '--disable-client-side-phishing-detection',
                    '--disable-crash-reporter',
                    '--disable-default-apps',
                    '--disable-extensions',
                    '--disable-hang-monitor',
                    '--disable-logging',
                    '--disable-plugins',
                    '--disable-popup-blocking',
                    '--disable-prompt-on-repost',
                    '--disable-sync',
                    '--disable-translate',
                    '--disable-windows10-custom-titlebar',
                    '--metrics-recording-only',
                    '--no-first-run',
                    '--no-default-browser-check',
                    '--safebrowsing-disable-auto-update'
                ],
                ignoreDefaultArgs: ['--enable-automation'],
                userDataDir: `/tmp/browser-session-${sessionId}`,
                timeout: 30000
            };

            // –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞
            const browser = await puppeteer.launch(browserConfig);
            const page = await browser.newPage();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await this.configurePage(page, deviceType, viewport);

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            const sessionData = {
                sessionId,
                browser,
                page,
                deviceType,
                viewport,
                createdAt: new Date(),
                status: 'active',
                lastActivity: new Date()
            };

            this.sessions.set(sessionId, sessionData);

            console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä–Ω–∞—è —Å–µ—Å—Å–∏—è ${sessionId} –∑–∞–ø—É—â–µ–Ω–∞`);

            return {
                sessionId,
                status: 'active',
                deviceType,
                viewport
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏ ${sessionId}:`, error);
            await this.cleanup(sessionId);
            throw error;
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—Ä–∞—É–∑–µ—Ä–∞
    async configurePage(page, deviceType, viewport) {
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ viewport
        await page.setViewport(viewport);

        // User Agent –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        const userAgents = {
            mobile: 'Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.0 Mobile/15E148 Safari/604.1',
            tablet: 'Mozilla/5.0 (iPad; CPU OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.0 Mobile/15E148 Safari/604.1',
            desktop: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36'
        };

        await page.setUserAgent(userAgents[deviceType] || userAgents.desktop);

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
        await page.evaluateOnNewDocument(() => {
            // –ë–ª–æ–∫–∏—Ä—É–µ–º WebRTC –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–∫–∏ IP
            Object.defineProperty(navigator, 'mediaDevices', {
                get: () => undefined
            });

            // –ë–ª–æ–∫–∏—Ä—É–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
            Object.defineProperty(navigator, 'geolocation', {
                get: () => undefined
            });

            // –ë–ª–æ–∫–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            Object.defineProperty(window, 'Notification', {
                get: () => undefined
            });

            // –û—á–∏—Å—Ç–∫–∞ localStorage –∏ sessionStorage
            if (window.localStorage) {
                window.localStorage.clear();
            }
            if (window.sessionStorage) {
                window.sessionStorage.clear();
            }

            // –ë–ª–æ–∫–∏—Ä—É–µ–º –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
            document.addEventListener('DOMContentLoaded', () => {
                const forms = document.querySelectorAll('form');
                forms.forEach(form => {
                    form.setAttribute('autocomplete', 'off');
                });
            });
        });

        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        await page.setRequestInterception(true);
        page.on('request', (request) => {
            const resourceType = request.resourceType();
            const url = request.url();

            // –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç—Ä–µ–∫–µ—Ä—ã, —Ä–µ–∫–ª–∞–º—É –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            const blockedDomains = [
                'google-analytics.com',
                'googletagmanager.com',
                'facebook.com/tr',
                'doubleclick.net',
                'googlesyndication.com',
                'amazon-adsystem.com'
            ];

            if (blockedDomains.some(domain => url.includes(domain))) {
                request.abort();
                return;
            }

            // –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã —Ä–µ—Å—É—Ä—Å–æ–≤
            if (['image', 'stylesheet', 'font', 'media'].includes(resourceType)) {
                request.abort();
            } else {
                request.continue();
            }
        });

        // –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        await page.setCacheEnabled(false);

        console.log(`üîß –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è ${deviceType}`);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ viewport –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    getViewportSettings(deviceType) {
        const viewports = {
            mobile: {
                width: 390,
                height: 844,
                deviceScaleFactor: 3,
                isMobile: true,
                hasTouch: true
            },
            tablet: {
                width: 768,
                height: 1024,
                deviceScaleFactor: 2,
                isMobile: true,
                hasTouch: true
            },
            desktop: {
                width: 1920,
                height: 1080,
                deviceScaleFactor: 1,
                isMobile: false,
                hasTouch: false
            }
        };

        return viewports[deviceType] || viewports.desktop;
    }

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ URL
    async navigateToUrl(sessionId, url) {
        try {
            const session = this.sessions.get(sessionId);
            if (!session) {
                throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ .onion —Å–∞–π—Ç –∏–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π URL
            if (!this.isAllowedUrl(url)) {
                throw new Error('URL –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞');
            }

            await session.page.goto(url, { 
                waitUntil: 'networkidle2',
                timeout: 30000 
            });

            session.lastActivity = new Date();

            return {
                success: true,
                url,
                title: await session.page.title()
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ${sessionId}:`, error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ JavaScript –≤ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    async executeScript(sessionId, script) {
        try {
            const session = this.sessions.get(sessionId);
            if (!session) {
                throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            const result = await session.page.evaluate(script);
            session.lastActivity = new Date();

            return {
                success: true,
                result
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ ${sessionId}:`, error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    async getScreenshot(sessionId, options = {}) {
        try {
            const session = this.sessions.get(sessionId);
            if (!session) {
                throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            const screenshot = await session.page.screenshot({
                type: 'png',
                fullPage: options.fullPage || false,
                quality: options.quality || 80
            });

            session.lastActivity = new Date();

            return {
                success: true,
                screenshot: screenshot.toString('base64')
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ ${sessionId}:`, error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    async getPageContent(sessionId) {
        try {
            const session = this.sessions.get(sessionId);
            if (!session) {
                throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            const content = await session.page.content();
            const title = await session.page.title();
            const url = session.page.url();

            session.lastActivity = new Date();

            return {
                success: true,
                content,
                title,
                url
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ${sessionId}:`, error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    // –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É
    async clickElement(sessionId, selector) {
        try {
            const session = this.sessions.get(sessionId);
            if (!session) {
                throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            await session.page.waitForSelector(selector, { timeout: 5000 });
            await session.page.click(selector);

            session.lastActivity = new Date();

            return {
                success: true,
                message: `–ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É: ${selector}`
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ ${sessionId}:`, error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    // –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª–µ
    async typeText(sessionId, selector, text) {
        try {
            const session = this.sessions.get(sessionId);
            if (!session) {
                throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            await session.page.waitForSelector(selector, { timeout: 5000 });
            await session.page.type(selector, text);

            session.lastActivity = new Date();

            return {
                success: true,
                message: `–í–≤–µ–¥–µ–Ω —Ç–µ–∫—Å—Ç –≤ ${selector}`
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ ${sessionId}:`, error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π Tor –ª–∏—á–Ω–æ—Å—Ç–∏ (–Ω–æ–≤–æ–≥–æ IP)
    async getNewTorIdentity() {
        try {
            const identityInfo = await this.torManager.newIdentity();
            console.log(`üîÑ –ù–æ–≤–∞—è Tor –ª–∏—á–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∞: IP ${identityInfo.IP}`);
            return identityInfo;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π Tor –ª–∏—á–Ω–æ—Å—Ç–∏:', error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Tor —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    getTorStatus() {
        return this.torManager.getStatus();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Tor
    async checkTorHealth() {
        try {
            return await this.torManager.healthCheck();
        } catch (error) {
            console.error('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å Tor –∑–¥–æ—Ä–æ–≤—å–µ–º:', error);
            return false;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö URL
    isAllowedUrl(url) {
        // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ .onion —Å–∞–π—Ç—ã –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–æ–º–µ–Ω—ã
        const allowedPatterns = [
            /\.onion/,
            /duckduckgo\.com/,
            /start\.torproject\.org/,
            /check\.torproject\.org/
        ];

        return allowedPatterns.some(pattern => pattern.test(url));
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏
    async stopSession(sessionId) {
        try {
            const session = this.sessions.get(sessionId);
            if (!session) {
                throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            console.log(`‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏ ${sessionId}`);

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            await session.browser.close();

            // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            await this.cleanup(sessionId);

            // –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
            this.sessions.delete(sessionId);

            console.log(`‚úÖ –°–µ—Å—Å–∏—è ${sessionId} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);

            return {
                success: true,
                message: '–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏ ${sessionId}:`, error);
            throw error;
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    async cleanup(sessionId) {
        try {
            const sessionDir = `/tmp/browser-session-${sessionId}`;
            
            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–∏
            await fs.rm(sessionDir, { recursive: true, force: true });
            
            console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–µ—Å—Å–∏–∏ ${sessionId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
        } catch (error) {
            console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏ ${sessionId}:`, error);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏
    getSessionInfo(sessionId) {
        const session = this.sessions.get(sessionId);
        if (!session) {
            return null;
        }

        return {
            sessionId: session.sessionId,
            deviceType: session.deviceType,
            viewport: session.viewport,
            createdAt: session.createdAt,
            lastActivity: session.lastActivity,
            status: session.status
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
    getActiveSessions() {
        const sessions = [];
        for (const [sessionId, session] of this.sessions.entries()) {
            sessions.push(this.getSessionInfo(sessionId));
        }
        return sessions;
    }

    // –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
    async cleanupInactiveSessions() {
        const now = new Date();
        const maxInactivity = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç

        for (const [sessionId, session] of this.sessions.entries()) {
            if (now - session.lastActivity > maxInactivity) {
                console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏: ${sessionId}`);
                await this.stopSession(sessionId);
            }
        }
    }

    // –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
    async shutdown() {
        console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Å–µ—Å—Å–∏–π...');
        
        const shutdownPromises = [];
        for (const sessionId of this.sessions.keys()) {
            shutdownPromises.push(this.stopSession(sessionId));
        }
        
        await Promise.allSettled(shutdownPromises);
        console.log('‚úÖ –í—Å–µ —Å–µ—Å—Å–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }
}

module.exports = WebAppManager;
