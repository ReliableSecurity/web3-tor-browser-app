const { spawn, exec } = require('child_process');
const fs = require('fs').promises;
const path = require('path');
const net = require('net');
const EventEmitter = require('events');
const axios = require('axios');

class TorManager extends EventEmitter {
    constructor() {
        super();
        this.torProcess = null;
        this.torPort = parseInt(process.env.TOR_SOCKS_PORT) || 9050;
        this.controlPort = parseInt(process.env.TOR_CONTROL_PORT) || 9051;
        this.controlPassword = process.env.TOR_CONTROL_PASSWORD || 'torcontrol123';
        this.isRunning = false;
        this.circuits = new Map();
        this.connectionAttempts = 0;
        this.maxAttempts = 5;
        this.healthCheckInterval = null;
        
        console.log('üßÖ Tor Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Tor —Å–µ—Ä–≤–∏—Å–∞
    async initialize() {
        try {
            console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Tor —Å–µ—Ä–≤–∏—Å–∞...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Tor
            await this.checkTorInstallation();
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            await this.createTorConfig();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º Tor
            await this.startTor();
            
            // –û–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏ Tor
            await this.waitForConnection();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await this.verifyTorConnection();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            this.setupHealthMonitoring();
            
            console.log('‚úÖ Tor —Å–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
            this.emit('ready');
            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Tor:', error);
            throw error;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Tor
    async checkTorInstallation() {
        return new Promise((resolve, reject) => {
            exec('tor --version', (error, stdout, stderr) => {
                if (error) {
                    reject(new Error('Tor –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Tor: apt-get install tor'));
                } else {
                    const version = stdout.split('\n')[0];
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω ${version}`);
                    resolve(version);
                }
            });
        });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Tor
    async createTorConfig() {
        const configDir = '/tmp/tor-config';
        const configFile = path.join(configDir, 'torrc');
        
        try {
            await fs.mkdir(configDir, { recursive: true });
            
            const torConfig = `
# Tor Configuration for Web3 Tor Browser
# Generated automatically - do not edit manually

# Network settings
SOCKSPort ${this.torPort}
ControlPort ${this.controlPort}
HashedControlPassword 16:$(echo -n "${this.controlPassword}" | tor --hash-password -)

# Security settings
ExitRelay 0
DataDirectory ${configDir}/data
GeoIPFile /usr/share/tor/geoip
GeoIPv6File /usr/share/tor/geoip6

# Circuit settings
NewCircuitPeriod 120
MaxCircuitDirtiness 300
EnforceDistinctSubnets 1
NumEntryGuards 3

# Performance settings
AvoidDiskWrites 1
DisableDebuggerAttachment 1
SafeLogging 0
LogTimeGranularity 1

# Bridge and obfuscation support
UseBridges 0
ClientTransportPlugin obfs4 exec /usr/bin/obfs4proxy

# Hidden service settings
HiddenServiceSingleHopMode 0
HiddenServiceNonAnonymousMode 0

# Connection limits
ConnectionPadding 1
ReducedConnectionPadding 0
MaxClientCircuitsPending 32
MaxMemInQueues 512MB

# Bandwidth settings
RelayBandwidthRate 0
RelayBandwidthBurst 0
MaxAdvertisedBandwidth 1GB

# Exit policy
ExitPolicy reject *:*

# Directory authorities
DirReqStatistics 0
DirPortFrontPage /usr/share/tor/tor-exit-notice.html

# Additional security
DisableAllSwap 1
HardwareAccel 1
SafeSocks 1
TestSocks 1
WarnUnsafeSocks 1

# Logging
Log notice file ${configDir}/tor.log
Log info file ${configDir}/debug.log
            `;

            await fs.writeFile(configFile, torConfig);
            console.log(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Tor —Å–æ–∑–¥–∞–Ω–∞: ${configFile}`);
            return configFile;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Tor:', error);
            throw error;
        }
    }

    // –ó–∞–ø—É—Å–∫ Tor –ø—Ä–æ—Ü–µ—Å—Å–∞
    async startTor() {
        if (this.torProcess) {
            console.log('‚ö†Ô∏è Tor —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
            return;
        }

        return new Promise((resolve, reject) => {
            const configFile = '/tmp/tor-config/torrc';
            
            console.log('üöÄ –ó–∞–ø—É—Å–∫ Tor –ø—Ä–æ—Ü–µ—Å—Å–∞...');
            
            this.torProcess = spawn('tor', ['-f', configFile], {
                stdio: ['ignore', 'pipe', 'pipe'],
                detached: false
            });

            let output = '';
            let errorOutput = '';

            this.torProcess.stdout.on('data', (data) => {
                output += data.toString();
                const lines = data.toString().split('\n');
                
                lines.forEach(line => {
                    if (line.includes('Bootstrapped 100%')) {
                        console.log('‚úÖ Tor –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ç–∏ (100%)');
                        this.isRunning = true;
                        resolve();
                    } else if (line.includes('Bootstrapped')) {
                        const match = line.match(/Bootstrapped (\d+)%/);
                        if (match) {
                            console.log(`üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Tor: ${match[1]}%`);
                        }
                    }
                });
            });

            this.torProcess.stderr.on('data', (data) => {
                errorOutput += data.toString();
                console.error('Tor stderr:', data.toString());
            });

            this.torProcess.on('exit', (code, signal) => {
                console.log(`Tor –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: ${code}, —Å–∏–≥–Ω–∞–ª: ${signal}`);
                this.isRunning = false;
                this.torProcess = null;
                this.emit('exit', { code, signal });
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                if (code !== 0 && this.connectionAttempts < this.maxAttempts) {
                    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Tor...');
                    setTimeout(() => this.restart(), 5000);
                }
            });

            this.torProcess.on('error', (error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ Tor –ø—Ä–æ—Ü–µ—Å—Å–∞:', error);
                reject(error);
            });

            // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞
            setTimeout(() => {
                if (!this.isRunning) {
                    reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ Tor (60 —Å–µ–∫—É–Ω–¥)'));
                }
            }, 60000);
        });
    }

    // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Tor —Å–µ—Ç–∏
    async waitForConnection(timeout = 60000) {
        const startTime = Date.now();
        
        while (Date.now() - startTime < timeout) {
            try {
                if (await this.checkPortOpen(this.torPort)) {
                    console.log(`‚úÖ SOCKS –ø–æ—Ä—Ç ${this.torPort} –æ—Ç–∫—Ä—ã—Ç`);
                    return true;
                }
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
            }
            
            await this.sleep(2000);
        }
        
        throw new Error('–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Tor');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–∞
    checkPortOpen(port) {
        return new Promise((resolve) => {
            const socket = new net.Socket();
            
            socket.setTimeout(2000);
            
            socket.on('connect', () => {
                socket.destroy();
                resolve(true);
            });
            
            socket.on('error', () => {
                resolve(false);
            });
            
            socket.on('timeout', () => {
                socket.destroy();
                resolve(false);
            });
            
            socket.connect(port, '127.0.0.1');
        });
    }

    // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Tor —Å–µ—Ç–∏
    async verifyTorConnection() {
        try {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏ Tor...');
            
            // –°–æ–∑–¥–∞–µ–º HTTP –∞–≥–µ–Ω—Ç —Å SOCKS –ø—Ä–æ–∫—Å–∏
            const { SocksProxyAgent } = require('socks-proxy-agent');
            const agent = new SocksProxyAgent(`socks5://127.0.0.1:${this.torPort}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ check.torproject.org
            const response = await axios.get('https://check.torproject.org/api/ip', {
                httpAgent: agent,
                httpsAgent: agent,
                timeout: 30000
            });
            
            if (response.data.IsTor) {
                console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–µ—Ç–∏ Tor');
                console.log(`üåê Tor IP: ${response.data.IP}`);
                this.emit('connected', response.data);
                return response.data;
            } else {
                throw new Error('–¢—Ä–∞—Ñ–∏–∫ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ Tor');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Tor –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
            throw error;
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è
    setupHealthMonitoring() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        this.healthCheckInterval = setInterval(async () => {
            try {
                await this.healthCheck();
            } catch (error) {
                console.error('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º Tor:', error.message);
                this.emit('healthIssue', error);
            }
        }, 30000);
        
        console.log('üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è Tor –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Tor —Å–µ—Ä–≤–∏—Å–∞
    async healthCheck() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        if (!this.torProcess || this.torProcess.killed) {
            throw new Error('Tor –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã
        if (!await this.checkPortOpen(this.torPort)) {
            throw new Error(`SOCKS –ø–æ—Ä—Ç ${this.torPort} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
        if (Math.random() < 0.1) { // 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            await this.verifyTorConnection();
        }
        
        this.emit('healthy');
        return true;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ IP (–Ω–æ–≤–∞—è —Ü–µ–ø–æ—á–∫–∞)
    async newIdentity() {
        try {
            console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π Tor —Ü–µ–ø–æ—á–∫–∏...');
            
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ control –ø–æ—Ä—Ç—É
            await this.sendControlCommand('SIGNAL NEWNYM');
            
            // –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏
            await this.sleep(3000);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π IP
            const connectionInfo = await this.verifyTorConnection();
            
            console.log(`‚úÖ –ù–æ–≤–∞—è Tor —Ü–µ–ø–æ—á–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞, IP: ${connectionInfo.IP}`);
            this.emit('newIdentity', connectionInfo);
            
            return connectionInfo;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ü–µ–ø–æ—á–∫–∏:', error);
            throw error;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ control –ø–æ—Ä—Ç
    async sendControlCommand(command) {
        return new Promise((resolve, reject) => {
            const socket = new net.Socket();
            
            socket.connect(this.controlPort, '127.0.0.1', () => {
                // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                socket.write(`AUTHENTICATE "${this.controlPassword}"\r\n`);
            });
            
            let response = '';
            let authenticated = false;
            
            socket.on('data', (data) => {
                response += data.toString();
                
                if (!authenticated && response.includes('250 OK')) {
                    authenticated = true;
                    response = '';
                    socket.write(`${command}\r\n`);
                } else if (authenticated && response.includes('250 OK')) {
                    socket.write('QUIT\r\n');
                    socket.end();
                    resolve(response);
                } else if (response.includes('515') || response.includes('551')) {
                    socket.end();
                    reject(new Error(`Control command failed: ${response}`));
                }
            });
            
            socket.on('error', (error) => {
                reject(error);
            });
            
            socket.on('timeout', () => {
                socket.end();
                reject(new Error('Control command timeout'));
            });
            
            socket.setTimeout(10000);
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ø–æ—á–∫–∞—Ö
    async getCircuitInfo() {
        try {
            const response = await this.sendControlCommand('GETINFO circuit-status');
            // –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ø–æ—á–∫–∞—Ö
            return this.parseCircuitInfo(response);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ø–æ—á–∫–∞—Ö:', error);
            return [];
        }
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ø–æ—á–∫–∞—Ö
    parseCircuitInfo(response) {
        const circuits = [];
        const lines = response.split('\n');
        
        lines.forEach(line => {
            if (line.startsWith('250') && line.includes('circuit-status=')) {
                const circuitData = line.split('circuit-status=')[1];
                if (circuitData) {
                    // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                    circuits.push({
                        raw: circuitData,
                        timestamp: new Date()
                    });
                }
            }
        });
        
        return circuits;
    }

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Tor —Å–µ—Ä–≤–∏—Å–∞
    async restart() {
        console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Tor —Å–µ—Ä–≤–∏—Å–∞...');
        
        try {
            this.connectionAttempts++;
            
            // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
            await this.stop();
            
            // –û–∂–∏–¥–∞–Ω–∏–µ
            await this.sleep(3000);
            
            // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫
            await this.startTor();
            await this.waitForConnection();
            await this.verifyTorConnection();
            
            this.connectionAttempts = 0;
            console.log('‚úÖ Tor —Å–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω');
            this.emit('restarted');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Tor:', error);
            
            if (this.connectionAttempts >= this.maxAttempts) {
                console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞');
                this.emit('failed');
                throw new Error('–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Tor —Å–µ—Ä–≤–∏—Å');
            }
            
            // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            setTimeout(() => this.restart(), 10000);
        }
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor —Å–µ—Ä–≤–∏—Å–∞
    async stop() {
        console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor —Å–µ—Ä–≤–∏—Å–∞...');
        
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if (this.healthCheckInterval) {
            clearInterval(this.healthCheckInterval);
            this.healthCheckInterval = null;
        }
        
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
        if (this.torProcess) {
            this.torProcess.kill('SIGTERM');
            
            // –û–∂–∏–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await new Promise((resolve) => {
                const timeout = setTimeout(() => {
                    if (this.torProcess) {
                        this.torProcess.kill('SIGKILL');
                    }
                    resolve();
                }, 5000);
                
                if (this.torProcess) {
                    this.torProcess.on('exit', () => {
                        clearTimeout(timeout);
                        resolve();
                    });
                } else {
                    clearTimeout(timeout);
                    resolve();
                }
            });
            
            this.torProcess = null;
        }
        
        this.isRunning = false;
        console.log('‚úÖ Tor —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        this.emit('stopped');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    getStatus() {
        return {
            isRunning: this.isRunning,
            torPort: this.torPort,
            controlPort: this.controlPort,
            processId: this.torProcess ? this.torProcess.pid : null,
            connectionAttempts: this.connectionAttempts,
            uptime: this.torProcess ? Date.now() - this.torProcess.spawnTime : 0
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
    getProxyConfig() {
        return {
            protocol: 'socks5',
            host: '127.0.0.1',
            port: this.torPort,
            url: `socks5://127.0.0.1:${this.torPort}`
        };
    }

    // Utility —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—É–∑—ã
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

module.exports = TorManager;
