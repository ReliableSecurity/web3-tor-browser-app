const TelegramBot = require('node-telegram-bot-api');

class TelegramBotService {
    constructor(callbacks) {
        this.token = process.env.TELEGRAM_BOT_TOKEN;
        if (!this.token) {
            throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        }
        
        this.bot = new TelegramBot(this.token, { polling: true });
        this.callbacks = callbacks;
        this.userSessions = new Map(); // –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        this.setupCommands();
        this.setupHandlers();
        
        console.log('‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    setupCommands() {
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
        this.bot.setMyCommands([
            { command: 'start', description: 'üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
            { command: 'webapp', description: 'üßÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å Tor –±—Ä–∞—É–∑–µ—Ä (Web App)' },
            { command: 'status', description: 'üìä –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π' },
            { command: 'stop', description: '‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä' },
            { command: 'help', description: '‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º' },
            { command: 'web3', description: 'ü™ô Web3 –∫–æ—à–µ–ª–µ–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏' }
        ]);
    }

    setupHandlers() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        this.bot.onText(/\/start/, async (msg) => {
            const chatId = msg.chat.id;
            const userId = msg.from.id;
            
            const welcomeMessage = `
·º±f –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Web3 Tor Browser!

üß• –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π Tor –±—Ä–∞—É–∑–µ—Ä –ø—Ä—è–º–æ –≤ Telegram!

üí° –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ üì± –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –≤ Telegram
‚Ä¢ üß• 100% –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ Tor
‚Ä¢ üö´ –ù–∏–∫–∞–∫–∏—Ö –ª–æ–≥–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
‚Ä¢ üåç Web3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
‚Ä¢ üñ•Ô∏è –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

üéÜ –ù–∞—á–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!
            `;
            
            await this.bot.sendMessage(chatId, welcomeMessage, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üßÖ –û—Ç–∫—Ä—ã—Ç—å Tor Browser', web_app: { url: process.env.BASE_URL + '/webapp' } }
                        ],
                        [
                            { text: 'üìä –°—Ç–∞—Ç—É—Å', callback_data: 'check_status' },
                            { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'show_help' }
                        ],
                        [
                            { text: 'ü™ô Web3 –ö–æ—à–µ–ª–µ–∫', callback_data: 'web3_wallet' }
                        ]
                    ]
                }
            });
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /webapp
        this.bot.onText(/\/webapp/, async (msg) => {
            await this.handleLaunchWebApp(msg);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /mobile –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        this.bot.onText(/\/mobile/, async (msg) => {
            await this.handleLaunchBrowser(msg, { userAgent: 'mobile' });
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /desktop –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        this.bot.onText(/\/desktop/, async (msg) => {
            await this.handleLaunchBrowser(msg, { userAgent: 'desktop' });
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status
        this.bot.onText(/\/status/, async (msg) => {
            await this.handleStatus(msg);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stop
        this.bot.onText(/\/stop(.*)/, async (msg, match) => {
            await this.handleStopBrowser(msg, match[1]);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
        this.bot.onText(/\/help/, async (msg) => {
            await this.handleHelp(msg);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /web3
        this.bot.onText(/\/web3/, async (msg) => {
            await this.handleWeb3(msg);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
        this.bot.on('callback_query', async (callbackQuery) => {
            await this.handleCallbackQuery(callbackQuery);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        this.bot.on('error', (error) => {
            console.error('–û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞:', error);
        });

        console.log('ü§ñ Telegram –±–æ—Ç handlers –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    async handleLaunchWebApp(msg) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        const webAppUrl = `${process.env.BASE_URL || 'http://localhost:3000'}/webapp`;

        await this.bot.sendMessage(chatId, `
üßÖ –ó–∞–ø—É—Å–∫–∞—é Tor –±—Ä–∞—É–∑–µ—Ä –≤ Web App...

üí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Tor –±—Ä–∞—É–∑–µ—Ä –ø—Ä—è–º–æ –≤ Telegram:
        `, {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å Tor Browser', web_app: { url: webAppUrl } }
                    ],
                    [
                        { text: 'üìä –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–π', callback_data: 'check_status' },
                        { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'show_help' }
                    ]
                ]
            }
        });
    }

    async handleLaunchBrowser(msg, options = {}) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        const deviceType = options.userAgent || 'desktop';
        const deviceEmoji = {
            mobile: 'üì±',
            tablet: 'üì±',
            desktop: 'üñ•Ô∏è'
        };

        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
            const existingSession = this.userSessions.get(userId);
            if (existingSession) {
                await this.bot.sendMessage(chatId, `
‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –±—Ä–∞—É–∑–µ—Ä–∞!

üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞: ${existingSession.accessUrl}
üÜî ID —Å–µ—Å—Å–∏–∏: ${existingSession.sessionId}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏.
                `);
                return;
            }

            await this.bot.sendMessage(chatId, 'üîÑ –ó–∞–ø—É—Å–∫–∞—é Tor –±—Ä–∞—É–∑–µ—Ä... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.');

            // –í—ã–∑–æ–≤ callback –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            const result = await this.callbacks.onStartBrowser(userId);

            if (result.success) {
                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏
                this.userSessions.set(userId, {
                    sessionId: result.sessionId,
                    accessUrl: result.accessUrl,
                    createdAt: new Date()
                });

                await this.bot.sendMessage(chatId, `
‚úÖ Tor –±—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!

üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞: ${result.accessUrl}
üÜî ID —Å–µ—Å—Å–∏–∏: ${result.sessionId}

üí° –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –ª—é–±–æ–º –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Tor –±—Ä–∞—É–∑–µ—Ä—É
‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É, –æ–Ω–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
                `, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä', url: result.accessUrl }
                            ],
                            [
                                { text: '‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data: `stop_${result.sessionId}` },
                                { text: 'üìä –°—Ç–∞—Ç—É—Å', callback_data: 'check_status' }
                            ]
                        ]
                    }
                });
            } else {
                await this.bot.sendMessage(chatId, `
‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: ${result.error}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
                `);
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞:', error);
            await this.bot.sendMessage(chatId, `
‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
            `);
        }
    }

    async handleStatus(msg) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        const session = this.userSessions.get(userId);

        if (!session) {
            await this.bot.sendMessage(chatId, `
üìä –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–π

‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –±—Ä–∞—É–∑–µ—Ä–∞.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /launch –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Tor –±—Ä–∞—É–∑–µ—Ä–∞.
            `);
            return;
        }

        const uptime = Math.floor((Date.now() - session.createdAt.getTime()) / 1000 / 60);

        await this.bot.sendMessage(chatId, `
üìä –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏

‚úÖ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞
üÜî ID: ${session.sessionId}
üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptime} –º–∏–Ω
üîó –°—Å—ã–ª–∫–∞: ${session.accessUrl}
        `, {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä', url: session.accessUrl }
                    ],
                    [
                        { text: '‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data: `stop_${session.sessionId}` },
                        { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'check_status' }
                    ]
                ]
            }
        });
    }

    async handleStopBrowser(msg, sessionIdSuffix = '') {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        try {
            const session = this.userSessions.get(userId);
            if (!session) {
                await this.bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.');
                return;
            }

            await this.bot.sendMessage(chatId, '‚è≥ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±—Ä–∞—É–∑–µ—Ä...');

            const result = await this.callbacks.onStopBrowser(userId, session.sessionId);

            if (result.success) {
                this.userSessions.delete(userId);
                await this.bot.sendMessage(chatId, `
‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!

üÜî –°–µ—Å—Å–∏—è ${session.sessionId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.
üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /launch –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞.
                `);
            } else {
                await this.bot.sendMessage(chatId, `
‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞: ${result.error}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
                `);
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞:', error);
            await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞.');
        }
    }

    async handleHelp(msg) {
        const chatId = msg.chat.id;

        const helpMessage = `
‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

üßÖ /launch - –ó–∞–ø—É—Å—Ç–∏—Ç—å Tor –±—Ä–∞—É–∑–µ—Ä
üìä /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
‚õî /stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
ü™ô /web3 - Web3 –∫–æ—à–µ–ª–µ–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏
‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /launch –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
2. –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±—Ä–∞—É–∑–µ—Ä—É
3. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –ª—é–±–æ–º –±—Ä–∞—É–∑–µ—Ä–µ
4. –ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –∞–Ω–æ–Ω–∏–º–Ω—ã–º Tor –±—Ä–∞—É–∑–µ—Ä–æ–º
5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ

üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
‚Ä¢ –í–µ—Å—å —Ç—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —Å–µ—Ç—å Tor
‚Ä¢ –ë—Ä–∞—É–∑–µ—Ä –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–µ—Å—Å–∏–∏

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @admin
        `;

        await this.bot.sendMessage(chatId, helpMessage);
    }

    async handleWeb3(msg) {
        const chatId = msg.chat.id;

        await this.bot.sendMessage(chatId, `
ü™ô Web3 –ö–æ—à–µ–ª–µ–∫

üí° –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!

–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ MetaMask
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–∞–Ω—Å–∞
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
‚Ä¢ –†–∞–±–æ—Ç–∞ —Å DeFi –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º–∏
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ NFT

üîÑ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!
        `, {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üßÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å Tor Browser', callback_data: 'launch_browser' }
                    ]
                ]
            }
        });
    }

    async handleCallbackQuery(callbackQuery) {
        const chatId = callbackQuery.message.chat.id;
        const userId = callbackQuery.from.id;
        const data = callbackQuery.data;

        try {
            await this.bot.answerCallbackQuery(callbackQuery.id);

            switch (data) {
                case 'launch_browser':
                    await this.handleLaunchBrowser({ chat: { id: chatId }, from: { id: userId } });
                    break;

                case 'check_status':
                    await this.handleStatus({ chat: { id: chatId }, from: { id: userId } });
                    break;

                case 'show_help':
                    await this.handleHelp({ chat: { id: chatId } });
                    break;

                case 'web3_wallet':
                    await this.handleWeb3({ chat: { id: chatId } });
                    break;

                default:
                    if (data.startsWith('stop_')) {
                        const sessionId = data.substring(5);
                        await this.handleStopBrowser({ chat: { id: chatId }, from: { id: userId } }, sessionId);
                    }
                    break;
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query:', error);
            await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.');
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    async notifyUser(userId, message, options = {}) {
        try {
            await this.bot.sendMessage(userId, message, options);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    getUserSession(userId) {
        return this.userSessions.get(userId);
    }

    // –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
    cleanupInactiveSessions() {
        const now = Date.now();
        const maxAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞

        for (const [userId, session] of this.userSessions.entries()) {
            if (now - session.createdAt.getTime() > maxAge) {
                this.userSessions.delete(userId);
                console.log(`–û—á–∏—â–µ–Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            }
        }
    }
}

module.exports = TelegramBotService;
